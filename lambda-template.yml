AWSTemplateFormatVersion: 2010-09-09
Parameters:
  SecurityGroupsRegion:
    Type: String
  GlobalSecurityGroupId:
    Type: String
  RegionalSecurityGroupId:
    Type: String
Resources:
  UpdateLoadBalancerSecurityGroupsFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Runtime: nodejs12.x
      Timeout: 10
      Role: !GetAtt 
        - UpdateLoadBalancerSecurityGroupsFunctionRole
        - Arn
      Environment:
        Variables:
          SECURITY_GROUPS_REGION: !Ref SecurityGroupsRegion
          GLOBAL_SECURITY_GROUP_ID: !Ref GlobalSecurityGroupId
          REGIONAL_SECURITY_GROUP_ID: !Ref RegionalSecurityGroupId
      Code:
        ZipFile: |
          "use strict";

          const aws = require('aws-sdk');
          const crypto = require('crypto');
          const http = require('https');

          const getBody = url => {
              return new Promise((resolve, reject) => {
                  http.get(url, res => {
                      let body = '';
                      res.on('data', chunk => body += chunk);
                      res.on('end', () => resolve(body));
                      res.on('error', reject);
                  });
              });
          };

          const describeSecurityGroups = (ec2, options) => {
              return new Promise((resolve, reject) => {
                  ec2.describeSecurityGroups(options, (err, data) => {
                      if (err) reject(err);
                      resolve(data);
                  });
              });
          };

          const authorizeSecurityGroupIngress = (ec2, options) => {
              return new Promise((resolve, reject) => {
                  ec2.authorizeSecurityGroupIngress(options, (err, data) => {
                      if (err) reject(err);
                      resolve(data);
                  });
              });
          };

          const revokeSecurityGroupIngress = (ec2, options) => {
              return new Promise((resolve, reject) => {
                  ec2.revokeSecurityGroupIngress(options, (err, data) => {
                      if (err) reject(err);
                      resolve(data);
                  });
              });
          };

          const securityGroupOptions = (securityGroupId, ipRanges) => {
              return {
                  GroupId: securityGroupId,
                  IpPermissions: [{
                      IpProtocol: 'tcp',
                      FromPort: 443,
                      ToPort: 443,
                      IpRanges: ipRanges.map(ipr => {
                          return {
                              CidrIp: ipr
                          };
                      }),
                  }]
              };
          };

          const syncIpRange = async (ec2, securityGroupId, newRanges) => {
              const securityGroup = await describeSecurityGroups(ec2, { GroupIds: [securityGroupId] });
              const oldRanges = securityGroup.SecurityGroups[0].IpPermissions[0].IpRanges.map(ipr => ipr.CidrIp);

              const toRevoke = [...oldRanges].filter(x => !newRanges.includes(x));

              if (toRevoke.length > 0) {
                  const revokeOptions = securityGroupOptions(securityGroupId, toRevoke);
                  await revokeSecurityGroupIngress(ec2, revokeOptions);
              }

              const toAuthorize = [...newRanges].filter(x => !oldRanges.includes(x));

              if (toAuthorize.length > 0) {
                  const authorizeOptions = securityGroupOptions(securityGroupId, toAuthorize);
                  await authorizeSecurityGroupIngress(ec2, authorizeOptions);
              }

              return {
                  securityGroupId: securityGroupId,
                  revoked: toRevoke,
                  authorized: toAuthorize
              };
          };

          exports.handler = async (event, context) => {

              try {
                  const message = JSON.parse(event.Records[0].Sns.Message);
                  const expectedMd5 = message.md5;
                  const url = message.url;

                  const body = await getBody(url);
                  const actualMd5 = crypto.createHash('md5').update(body).digest('hex');

                  if (actualMd5 !== expectedMd5) {
                      throw new Error(`Actual checksum ${actualMd5} did not match expected checksum ${expectedMd5}`);
                  }

                  const json = JSON.parse(body);
                  const ec2 = new aws.EC2({ region: process.env.SECURITY_GROUPS_REGION, apiVersion: '2016-11-15' });

                  const newGlobalRanges = json.prefixes
                      .filter(p => p.service === 'CLOUDFRONT' && p.region === 'GLOBAL')
                      .map(p => p.ip_prefix);
                  
                  const globalSyncResult = await syncIpRange(ec2, process.env.GLOBAL_SECURITY_GROUP_ID, newGlobalRanges);
                  console.log(globalSyncResult);

                  const newRegionalRanges = json.prefixes
                      .filter(p => p.service === 'CLOUDFRONT' && p.region !== 'GLOBAL')
                      .map(p => p.ip_prefix);
                  const regionalSyncResult = await syncIpRange(ec2, process.env.REGIONAL_SECURITY_GROUP_ID, newRegionalRanges);
                  console.log(regionalSyncResult)

              } catch (error) {
                  console.error(error);
              }
          }
  UpdateLoadBalancerSecurityGroupsFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: UpdateSecurityGroups
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:AuthorizeSecurityGroupIngress'
                  - 'ec2:RevokeSecurityGroupIngress'
                Resource: '*'
  IpRangeUpdatedSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      TopicArn: 'arn:aws:sns:us-east-1:806199016981:AmazonIpSpaceChanged'
      Protocol: lambda
      Endpoint: !GetAtt 
        - UpdateLoadBalancerSecurityGroupsFunction
        - Arn
  UpdateLoadBalancerSecurityGroupsFunctionPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: sns.amazonaws.com
      SourceArn: 'arn:aws:sns:us-east-1:806199016981:AmazonIpSpaceChanged'
      FunctionName: !GetAtt 
        - UpdateLoadBalancerSecurityGroupsFunction
        - Arn
